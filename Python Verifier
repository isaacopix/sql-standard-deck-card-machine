import unittest
import sqlite3

# Function to connect to the SQLite database
def create_connection():
    return sqlite3.connect(':memory:')

# Function to create the tables in the database
def create_tables(connection):
    cursor = connection.cursor()

    cursor.execute('''
        CREATE TABLE Rank (
            rank_id INTEGER PRIMARY KEY AUTOINCREMENT,
            rank_name VARCHAR(10) NOT NULL UNIQUE
        )
    ''')

    cursor.execute('''
        CREATE TABLE Suit (
            suit_id INTEGER PRIMARY KEY AUTOINCREMENT,
            suit_name VARCHAR(10) NOT NULL UNIQUE
        )
    ''')

    cursor.execute('''
        CREATE TABLE Card (
            card_id INTEGER PRIMARY KEY AUTOINCREMENT,
            rank_id INTEGER,
            suit_id INTEGER,
            FOREIGN KEY (rank_id) REFERENCES Rank(rank_id) ON DELETE CASCADE,
            FOREIGN KEY (suit_id) REFERENCES Suit(suit_id) ON DELETE CASCADE
        )
    ''')

    cursor.execute('''
        CREATE TABLE Player_Cards (
            player_id INTEGER,
            card_id INTEGER,
            PRIMARY KEY (player_id, card_id),
            FOREIGN KEY (player_id) REFERENCES Player(player_id) ON DELETE CASCADE,
            FOREIGN KEY (card_id) REFERENCES Card(card_id) ON DELETE CASCADE
        )
    ''')

    connection.commit()

# Function to insert a standard deck of cards into the database
def insert_standard_deck(connection):
    cursor = connection.cursor()

    ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
    suits = ['Clubs', 'Hearts', 'Diamonds', 'Spades']

    # Insert ranks
    for rank in ranks:
        cursor.execute('INSERT INTO Rank (rank_name) VALUES (?)', (rank,))

    # Insert suits
    for suit in suits:
        cursor.execute('INSERT INTO Suit (suit_name) VALUES (?)', (suit,))

    # Insert cards (cross join of ranks and suits)
    cursor.execute('''
        INSERT INTO Card (rank_id, suit_id)
        SELECT Rank.rank_id, Suit.suit_id
        FROM Rank, Suit
    ''')

    connection.commit()

class TestStandardDeck(unittest.TestCase):
    def setUp(self):
        self.connection = create_connection()
        create_tables(self.connection)
        insert_standard_deck(self.connection)

    def tearDown(self):
        self.connection.close()

    def test_deck_size(self):
        cursor = self.connection.cursor()
        cursor.execute('SELECT COUNT(*) FROM Card')
        count = cursor.fetchone()[0]
        self.assertEqual(count, 52, "Deck should have 52 cards")

    def test_unique_cards(self):
        cursor = self.connection.cursor()
        cursor.execute('SELECT COUNT(DISTINCT card_id) FROM Card')
        count = cursor.fetchone()[0]
        self.assertEqual(count, 52, "All cards should be unique")

    def test_player_initial_hand(self):
        # Add your test logic for dealing cards to players here
        pass

if __name__ == '__main__':
    unittest.main()
